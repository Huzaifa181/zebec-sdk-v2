import { PublicKey, TransactionInstruction } from "@solana/web3.js";
export declare const createMultiSigSafeInstruction: (senderAddress: PublicKey, escrowAddress: PublicKey, withdrawEscrowAddress: PublicKey, programId: PublicKey, signers: any, m: number) => Promise<TransactionInstruction>;
export declare const createMultiSigDepositInstruction: (senderAddress: PublicKey, zebecWalletAddress: PublicKey, zebecSafeAddress: PublicKey, escrowAddress: PublicKey, withdrawEscrowAddress: PublicKey, programId: PublicKey, amount: number) => Promise<TransactionInstruction>;
export declare const createMultiSigSignInstruction: (senderAddress: PublicKey, txEscrowAddress: PublicKey, zebecWalletEscrowAddress: PublicKey, withdrawEscrowAddress: PublicKey, programId: PublicKey, signer: any) => Promise<TransactionInstruction>;
export declare const createMultiSigRejectSignInstruction: (senderAddress: PublicKey, txEscrowAddress: PublicKey, zebecWalletEscrowAddress: PublicKey, programId: PublicKey) => Promise<TransactionInstruction>;
export declare const createMultiSigInitInstruction: (senderAddress: PublicKey, recipientAddress: PublicKey, zebecWalletEscrowAddress: PublicKey, escrowAddress: PublicKey, programId: PublicKey, start_time: number, end_time: number, amount: number, signers: any) => Promise<TransactionInstruction>;
export declare const createMultiSigPauseInstruction: (senderAddress: PublicKey, recipientAddress: PublicKey, txEscrowAddress: PublicKey, zebecWalletEscrowAddress: PublicKey, programId: PublicKey) => Promise<TransactionInstruction>;
export declare const createMultiSigCancelInstruction: (senderAddress: PublicKey, recipientAddress: PublicKey, zebecSafeAddress: PublicKey, txEscrowAddress: PublicKey, zebecWalletEscrowAddress: PublicKey, withdrawEscrowAddress: PublicKey, _FEE_ADDRESS: PublicKey, programId: PublicKey) => Promise<TransactionInstruction>;
export declare const createMultiSigResumeInstruction: (senderAddress: PublicKey, recipientAddress: PublicKey, txEscrowAddress: PublicKey, zebecWalletEscrowAddress: PublicKey, programId: PublicKey) => Promise<TransactionInstruction>;
export declare const createMultiSigWithdrawInstruction: (senderAddress: PublicKey, recipientAddress: PublicKey, zebecSafeAddress: PublicKey, txEscrowAddress: PublicKey, zebecWalletEscrowAddress: PublicKey, withdrawEscrowAddress: PublicKey, _FEE_ADDRESS: PublicKey, programId: PublicKey, amount: number) => Promise<TransactionInstruction>;
export declare const createMultiSigSignInstantInstruction: (senderAddress: PublicKey, recipientAddress: PublicKey, zebecSafeAddress: PublicKey, zebecWalletEscrowAddress: PublicKey, txEscrowAddress: PublicKey, programId: PublicKey, signed_by: any) => Promise<TransactionInstruction>;
export declare const createMultiSigRejectInstantInstruction: (senderAddress: PublicKey, zebecWalletEscrowAddress: PublicKey, txEscrowAddress: PublicKey, programId: PublicKey) => Promise<TransactionInstruction>;
export declare const createMultiSigInitInstantInstruction: (senderAddress: PublicKey, recipientAddress: PublicKey, zebecWalletEscrowAddress: PublicKey, escrowAddress: PublicKey, programId: PublicKey, amount: number, signer: any) => Promise<TransactionInstruction>;
export declare const createMultiSigDepositTokenInstruction: (senderAddress: PublicKey, zebecSafeAddress: PublicKey, zebecWalletEscrowAddress: PublicKey, TOKEN_PROGRAM_ADDRESS: PublicKey, tokenMintAddress: PublicKey, senderAssociatedAddress: PublicKey, zebecWalletAddress: PublicKey, withdrawEscrowAddress: PublicKey, escrowAssociatedAddress: PublicKey, zebecWalletAssociatedAddress: PublicKey, SYSTEM_RENT_ADDRESS: PublicKey, SPL_ASSOCIATED_TOKEN_ADDRESS: PublicKey, programId: PublicKey, amount: number) => Promise<TransactionInstruction>;
export declare const createMultiSigTokenSignInstruction: (senderAddress: PublicKey, txEscrowAddress: PublicKey, zebecWalletEscrowAddress: PublicKey, withdrawEscrowAddress: PublicKey, programId: PublicKey, signer: any) => Promise<TransactionInstruction>;
export declare const createMultiSigTokenRejectInstruction: (senderAddress: PublicKey, escrowAddress: PublicKey, vaultEscrowAddress: PublicKey, programId: PublicKey) => Promise<TransactionInstruction>;
export declare const createMultiSigTokenPauseInstruction: (senderAddress: PublicKey, recipientAddress: PublicKey, txEscrowAddress: PublicKey, vaultEscrowAddress: PublicKey, programId: PublicKey) => Promise<TransactionInstruction>;
export declare const createMultiSigTokenCancelInstruction: (senderAddress: PublicKey, recipientAddress: PublicKey, multisigVaultAddress: PublicKey, txEscrowAddress: PublicKey, vaultEscrowAddress: PublicKey, withdrawEscrowAddress: PublicKey, TOKEN_PROGRAM_ADDRESS: PublicKey, tokenMintAddress: PublicKey, SYSTEM_RENT_ADDRESS: PublicKey, recipientAssociatedAddress: PublicKey, escrowAssociatedAddress: PublicKey, SPL_ASSOCIATED_TOKEN_ADDRESS: PublicKey, feeAddress: PublicKey, feeAssociatedAddress: PublicKey, programId: PublicKey) => Promise<TransactionInstruction>;
export declare const createMultiSigTokenResumeInstruction: (senderAddress: PublicKey, recipientAddress: PublicKey, txEscrowAddress: PublicKey, vaultEscrowAddress: PublicKey, programId: PublicKey) => Promise<TransactionInstruction>;
export declare const createMultiSigTokenWithdrawInstruction: (senderAddress: PublicKey, recipientAddress: PublicKey, multisigVaultAddress: PublicKey, vaultEscrowAddress: PublicKey, txEscrowAddress: PublicKey, withdrawEscrowAddress: PublicKey, TOKEN_PROGRAM_ADDRESS: PublicKey, tokenMintAddress: PublicKey, SYSTEM_RENT_ADDRESS: PublicKey, escrowAssociatedAddress: PublicKey, recipientAssociatedAddress: PublicKey, SPL_ASSOCIATED_TOKEN_ADDRESS: PublicKey, feeAddress: PublicKey, feeAssociatedAddress: PublicKey, programId: PublicKey, amount: number) => Promise<TransactionInstruction>;
export declare const createMultiSigTokenInitInstruction: (senderAddress: PublicKey, recipientAddress: PublicKey, escrowAddress: PublicKey, vaultEscrowAddress: PublicKey, TOKEN_PROGRAM_ADDRESS: PublicKey, tokenMintAddress: PublicKey, programId: PublicKey, start_time: number, end_time: number, amount: number, paused: number, withdraw_limit: number) => Promise<TransactionInstruction>;
