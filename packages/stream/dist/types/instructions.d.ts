import { Keypair, PublicKey, TransactionInstruction } from "@solana/web3.js";
export declare const createInitMultiTokenStreamInstruction: (sender: PublicKey, recipient: PublicKey, tx_escrow: PublicKey, withdraw_escrow: PublicKey, programId: PublicKey, tokenMintAddress: PublicKey, start_time: number, end_time: number, amount: number) => Promise<TransactionInstruction>;
export declare const createPauseMultiTokenStreamInstruction: (sender: PublicKey, recipient: PublicKey, tx_escrow: PublicKey, programId: PublicKey) => Promise<TransactionInstruction>;
export declare const createResumeMultiTokenStreamInstruction: (sender: PublicKey, recipient: PublicKey, tx_escrow: PublicKey, programId: PublicKey) => Promise<TransactionInstruction>;
export declare const createCancelMultiTokenStreamInstruction: (sender: PublicKey, recipient: PublicKey, token: PublicKey, zebecVaultAddress: PublicKey, tx_escrow: PublicKey, withdraw_data: PublicKey, programId: PublicKey, recipientAssociatedTokenAddress: PublicKey, txEscrowAssociatedTokenAddress: PublicKey, feeAssociatedTokenAddress: PublicKey) => Promise<TransactionInstruction>;
export declare const createWithdrawMultiTokenStreamInstruction: (senderAddress: PublicKey, recipientAddress: PublicKey, zebecWalletAddress: PublicKey, escrowAddress: PublicKey, withdrawEscrowAddress: PublicKey, _TOKEN_PROGRAM_ID_: PublicKey, tokenMintAddress: PublicKey, _SYSTEM_RENT: PublicKey, zebecWalletAssociatedTokenAddress: PublicKey, recipientAssociatedTokenAddress: PublicKey, _A_TOKEN: PublicKey, _FEE_ADDRESS: PublicKey, feeAssociatedTokenAddress: PublicKey, programId: PublicKey, amount: number) => Promise<TransactionInstruction>;
export declare const createDepositMultiTokenInstruction: (senderAddress: PublicKey, zebecWalletAddress: PublicKey, tokenProgramAddress: PublicKey, tokenMintAddress: PublicKey, systemRentAddress: PublicKey, senderAssociatedTokenAddress: PublicKey, zebecWalletAssociatedTokenAddress: PublicKey, aTokenAddress: PublicKey, programId: PublicKey, amount: number) => Promise<TransactionInstruction>;
export declare const createWithdrawDepositedTokenInstruction: (senderAddress: PublicKey, tokenProgramAddress: PublicKey, tokenMintAddress: PublicKey, senderAssociatedTokenAddress: PublicKey, zebecWalletAddress: PublicKey, withdrawEscrowAddress: PublicKey, zebecWalletAssociatedTokenAddress: PublicKey, programId: PublicKey, amount: number) => Promise<TransactionInstruction>;
export declare const createInitSolStreamInstruction: (sender: PublicKey, receipient: PublicKey, tx_escrow: Keypair, withdraw_escrow: PublicKey, programId: PublicKey, start_time: number, end_time: number, amount: number) => Promise<TransactionInstruction>;
export declare const createPauseSolStreamInstruction: (sender: PublicKey, recipient: PublicKey, tx_escrow: PublicKey, programId: PublicKey) => Promise<TransactionInstruction>;
export declare const createResumeSolStreamInstruction: (sender: PublicKey, recipient: PublicKey, tx_escrow: PublicKey, programId: PublicKey) => Promise<TransactionInstruction>;
export declare const createCancelSolStreamInstruction: (sender: PublicKey, recipient: PublicKey, tx_escrow: PublicKey, zebecWallet: PublicKey, withdrawEscrow: PublicKey, programId: PublicKey) => Promise<TransactionInstruction>;
export declare const createDepositSolInstruction: (sender: PublicKey, zebecWalletAddress: PublicKey, amount: number, programId: PublicKey) => Promise<TransactionInstruction>;
export declare const createWithdrawDepositedSolInstruction: (senderAddress: PublicKey, zebecWalletAddress: PublicKey, withdrawEscrowAddress: PublicKey, amount: number, programId: PublicKey) => Promise<TransactionInstruction>;
export declare const createWithdrawSolStreamInstruction: (senderAddress: PublicKey, receipientAddress: PublicKey, txEscrowAddress: PublicKey, zebecWalletAddress: PublicKey, withdrawEscrowAddress: PublicKey, amount: number, programId: PublicKey) => Promise<TransactionInstruction>;
